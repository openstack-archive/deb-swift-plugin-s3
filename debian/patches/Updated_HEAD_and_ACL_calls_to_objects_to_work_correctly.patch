From 47148674264dd4b07ff396f3481bbba203937491 Mon Sep 17 00:00:00 2001
From: Chuck Thier <cthier@gmail.com>
Date: Thu, 6 Dec 2012 11:06:08 -0600
Subject: [PATCH] Updated HEAD and ACL calls to objects to work correctly

---
 swift3/middleware.py | 20 +++++++++-----------
 1 file changed, 9 insertions(+), 11 deletions(-)

diff --git a/swift3/middleware.py b/swift3/middleware.py
index bf52679..192a882 100644
--- a/swift3/middleware.py
+++ b/swift3/middleware.py
@@ -41,7 +41,8 @@
 An example client using the python boto library might look like the
 following for an SAIO setup::
 
-    connection = boto.s3.Connection(
+    from boto.s3.connection import S3Connection
+    connection = S3Connection(
         aws_access_key_id='test:tester',
         aws_secret_access_key='testing',
         port=8080,
@@ -603,25 +604,22 @@ def __init__(self, env, app, account_name, token, container_name,
                                              object_name)
 
     def GETorHEAD(self, env, start_response):
-        if env['REQUEST_METHOD'] == 'HEAD':
-            head = True
-            env['REQUEST_METHOD'] = 'GET'
+        if 'QUERY_STRING' in env:
+            args = dict(urlparse.parse_qsl(env['QUERY_STRING'], 1))
         else:
-            head = False
+            args = {}
+        if 'acl' in args:
+            # ACL requests need to make a HEAD call rather than GET
+            env['REQUEST_METHOD'] = 'HEAD'
 
         app_iter = self._app_call(env)
-
-        if head:
+        if env['REQUEST_METHOD'] == 'HEAD':
             app_iter = None
 
         status = self._get_status_int()
         headers = dict(self._response_headers)
 
         if is_success(status):
-            if 'QUERY_STRING' in env:
-                args = dict(urlparse.parse_qsl(env['QUERY_STRING'], 1))
-            else:
-                args = {}
             if 'acl' in args:
                 return get_acl(self.account_name, headers)
 
-- 
1.8.5.1

